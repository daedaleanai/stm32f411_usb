#pragma once

// Generated enums and structures for device {{.Name}} version {{.Version}}
// Generated by genstruct, DO NOT EDIT.

#include <stdint.h>

enum IRQn_Type {
	None_IRQn  = -16, // 0 position of estack reset pointer
	Reset_IRQn = -15, // 1 Reset, not a real IRQ           

	//  Cortex-M3 Processor Exceptions Numbers 
	NonMaskableInt_IRQn   = -14, // 2 Non Maskable Interrupt                           
	Reserved_3_IRQn       = -13,
	MemoryManagement_IRQn = -12, // 4 Cortex-M3 Memory Management Interrupt            
	BusFault_IRQn         = -11, // 5 Cortex-M3 Bus Fault Interrupt                    
	UsageFault_IRQn       = -10, // 6 Cortex-M3 Usage Fault Interrupt                  
	Reserved_7_IRQn       = -9,
	Reserved_8_IRQn       = -8,
	Reserved_9_IRQn       = -7,
	Reserved_10_IRQn      = -6,
	SVCall_IRQn           = -5, // 11 Cortex-M3 SV Call Interrupt                     
	DebugMonitor_IRQn     = -4, // 12 Cortex-M3 Debug Monitor Interrupt               
	Reserved_13_IRQn      = -3,
	PendSV_IRQn           = -2, // 14 Cortex-M3 Pend SV Interrupt                     
	SysTick_IRQn          = -1, // 15 Cortex-M3 System Tick Interrupt                 

	//  Device specific Interrupt Numbers
{{- range .Interrupts}}
	IRQ_{{.Name}} = {{.Value}}, // {{.Description}}
{{- end}}
};


#define __I volatile const // 'read only' permissions
#define __O volatile       // 'write only' permissions
#define __IO volatile      // 'read / write' permissions

{{define "access"}}{{if eq . "read-only"}}__I{{else if eq . "write-only"}}__O{{else if ne . "reserved"}}__IO{{end}}{{end}}

{{- range .Peripherals}}
{{- if .Registers}}
{{- if .Description}}
/* {{.Description}} */
{{- end}}
struct {{.Name}}_Type {
{{- range .Registers}}
{{- if .Union}}
	union {  // @{{.AddressOffset}}
		{{template "access" .Access}} uint{{.Size}}_t {{.Name}}{{if gt .ArraySize 1}}[{{.ArraySize}}]{{end}}; // {{.Description}}
{{- range .Union}}
		{{template "access" .Access}} uint{{.Size}}_t {{.Name}}{{if gt .ArraySize 1}}[{{.ArraySize}}]{{end}}; // {{.Description}}
{{- end}}
	};
{{- else}}
	{{template "access" .Access}} uint{{.Size}}_t {{.Name}}{{if gt .ArraySize 1}}[{{.ArraySize}}]{{end}}; // @{{.AddressOffset}} {{.Description}}
{{- end}}
{{- end}}
};
{{- $pname := .Name}}
{{- range .Registers}}
	{{- $rname := .Name}}
	{{- $regwidth := .Size}}
	{{- if .HasEnumFields}}

// {{$pname}}->{{$rname}} {{.Description}}
enum {
{{- range .Fields}}
	{{if ne .BitWidth $regwidth}}
		{{- if gt .BitWidth 1 -}}
			{{upper $pname}}_{{upper $rname}}_{{upper .Name}} = ((1UL<<{{.BitWidth}})-1) << {{.BitOffset}},{{if .Description}} // {{.Description}}{{end}}
		{{- else -}}
			{{upper $pname}}_{{upper $rname}}_{{upper .Name}} = 1UL<<{{.BitOffset}},{{if .Description}} // {{.Description}}{{end}}
		{{- end -}}
	{{- end}}
{{- end}}		
};
{{- if ne .Access "read-only"}}
{{- range .Fields}}
	{{- if ne .BitWidth $regwidth}}{{if gt .BitWidth 1}}
inline void {{lower $pname}}_{{lower $rname}}_set_{{lower .Name}}(struct {{$pname}}_Type* p, uint32_t val) { p->{{$rname}} = (p->{{$rname}} & ~{{upper $pname}}_{{upper $rname}}_{{upper .Name}}) | ((val<<{{.BitOffset}}) & {{upper $pname}}_{{upper $rname}}_{{upper .Name}}); }
	{{- end}}{{end}}
{{- end}}		
{{- end}}		
{{- range .Fields}}
	{{- if ne .BitWidth $regwidth}}
		{{- if gt .BitWidth 1}}
inline uint32_t {{lower $pname}}_{{lower $rname}}_get_{{lower .Name}}(struct {{$pname}}_Type* p) { return (p->{{$rname}} & {{upper $pname}}_{{upper $rname}}_{{upper .Name}}) >> {{.BitOffset}} ; }
		{{- end}}
	{{- end}}
{{- end}}		
	{{- end}}
{{- end}}
{{- end}}
{{if .Extends}}
{{- $dname := .Name}}
// Valid Casts:
{{range .Extends}} 
inline struct {{.Name}}_Type* {{$dname}}_as_{{.Name}}_Type(struct {{$dname}}_Type* p) { return (struct {{.Name}}_Type*)p; }
{{end}}
{{end}}
{{- end}}

#undef __I
#undef __O
#undef __IO

{{range .Peripherals}}
{{- if .BaseAddress}}
{{- if .DerivedFrom}}
struct {{.DerivedFrom}}_Type 	{{.Name}};	// @{{.BaseAddress.Hex}}
{{- else}}
struct {{.Name}}_Type	{{.Name}};	// @{{.BaseAddress.Hex}} {{if .Extends}}Also:{{range .Extends}} {{.Name}}_Type{{end}}{{end}}
{{- end}}
{{- end}}
{{- end}}

